{"version":3,"sources":["Auth.js"],"names":["bcrypt","require","User","jwt","config","exports","signup","req","res","body","name","email","password","role","findOne","existingUser","status","json","success","message","hash","hashedPassword","create","user","data","console","error","login","payload","id","_id","compare","token","sign","process","env","JWT_SECRET","expiresIn","toObject","undefined","options","expires","Date","now","httpOnly","cookie"],"mappings":"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","sourcesContent":["const bcrypt = require('bcrypt');\nconst User = require(\"../Models/User\");\nconst jwt = require(\"jsonwebtoken\")\n\nrequire(\"dotenv\").config()\n\n// Sign up route handler\nexports.signup = async (req, res) => {\n    try {\n        // get data\n        const { name, email, password, role } = req.body;\n\n        // check if user already exist \n        const existingUser = await User.findOne({ email });\n\n        if (existingUser) {\n            return res.status(400).json({\n                success: false,\n                message: \"User Already Exists\",\n            })\n        }\n\n        // Secured password \n        let hashedPassword;\n        try {\n            hashedPassword = await bcrypt.hash(password, 10);\n        }\n        catch (err) {\n            return res.status(500).json({\n                success: false,\n                message: \"Error in hashing password\",\n            })\n        }\n\n        // Create Entry for User\n        let user = await User.create({\n            name,email,password:hashedPassword,role\n        });\n\n        return res.status(200).json({\n            success : true,\n            message : \"User Created Successfully\",\n            data : user\n        });\n    }\n    catch (err) {\n        console.error(err)\n        return res.status(500).json({\n            success: false,\n            message: \"User cannot be register,Please try again later\",\n        })\n    }\n}\n\n// Login\nexports.login = async (req,res) => {\n    try\n    {\n        const {email,password} = req.body;\n        if(!email || !password)\n        {\n            return res.status(400).json({\n                success:false,\n                message : \"Please fill all the details carefully\",\n            })\n        }\n\n        // check for register user \n        let user = await User.findOne({email});\n        if(!user)\n        {\n            return res.status(401).json({\n                success : false,\n                message : \"User does not exist\",\n            });\n        }\n\n        // Verify password & generate a JWT token\n\n        const payload = {\n            email : user.email,\n            id : user._id,\n            role : user.role,\n        };\n\n\n        if(await bcrypt.compare(password,user.password)){\n            // password match\n            let token = jwt.sign(payload,process.env.JWT_SECRET,{\n                expiresIn : \"2h\",\n            });\n\n            user = user.toObject();\n            user.token = token;\n            user.password = undefined;\n\n            const options = {\n                expires : new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\n                httpOnly : true,\n            }\n\n            res.cookie(\"token\",token,options).status(200).json({\n                success : true,\n                token,\n                user,\n                message:\"User logged in successfully\"\n            });\n        }\n        else {\n            // password not match\n            return res.status(403).json({\n                success : false,\n                message : \"Password does not match\",\n            })\n        }\n    }\n    catch(err){\n        console.error(err)\n        return res.status(500).json({\n            success : false,\n            message : \"Login false\" \n        })\n    }\n}"],"file":"Auth.dev.js"}